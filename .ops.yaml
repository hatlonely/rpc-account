name: rpc-account

dep:
  ops:
    type: git
    url: "https://github.com/hatlonely/ops.git"
    version: master

env:
  default:
    NAME: "rpc-account"
    IMAGE_REPOSITORY: "rpc-account"
    IMAGE_TAG: "$(git describe --tags | awk '{print(substr($0,2,length($0)))}')"
  dev:
    K8S_CONTEXT: "home-k8s"
    NAMESPACE: "dev"
    REGISTRY_ENDPOINT: "{{.registry.aliyun.endpoint}}"
    REGISTRY_USERNAME: "{{.registry.aliyun.username}}"
    REGISTRY_PASSWORD: "{{.registry.aliyun.password}}"
    REGISTRY_NAMESPACE: "{{.registry.aliyun.namespace}}"
    MYSQL_ROOT_PASSWORD: "{{.mysql.rootPassword}}"
    MYSQL_HOST: "mysql"
    MYSQL_PORT: 3306
    MYSQL_USERNAME: "{{.mysql.username}}"
    MYSQL_PASSWORD: "{{.mysql.password}}"
    MYSQL_DATABASE: "account"
    REDIS_ADDRESS: "{{.redis.addr}}"
    REDIS_PASSWORD: "{{.redis.password}}"
    EMAIL_SERVER: "{{.email.server}}"
    EMAIL_PASSWORD: "{{.email.password}}"
    EMAIL_FROM: "{{.email.from}}"
    EMAIL_PORT: "{{.email.port}}"
    ELASTICSEARCH_ENDPOINT: "{{.elasticsearch.endpoint}}"
    ELASTICSEARCH_PASSWORD: "{{.elasticsearch.password}}"
    PULL_SECRET_NAME: "hatlonely-pull-secret"
    REPLICA_COUNT: 2
    INGRESS_HOST: "k8s.rpc.account.hatlonely.com"
    SECRET_NAME: "rpc-account-tls"

task:
  codegen:
    step:
      - docker login --username="${REGISTRY_USERNAME}" --password="${REGISTRY_PASSWORD}" "${REGISTRY_ENDPOINT}"
      - make codegen
  image:
    step:
      - make image
      - docker login --username="${REGISTRY_USERNAME}" --password="${REGISTRY_PASSWORD}" "${REGISTRY_ENDPOINT}"
      - docker tag "${REGISTRY_NAMESPACE}/${IMAGE_REPOSITORY}:${IMAGE_TAG}" "${REGISTRY_ENDPOINT}/${REGISTRY_NAMESPACE}/${IMAGE_REPOSITORY}:${IMAGE_TAG}"
      - docker push "${REGISTRY_ENDPOINT}/${REGISTRY_NAMESPACE}/${IMAGE_REPOSITORY}:${IMAGE_TAG}"
  mysql:
    args:
      cmd:
        type: string
        default: run
        validation: x in ["image", "run", "delete"]
    step:
      - sh ${DEP}/ops/tool/render.sh ops/mysql ${TMP}/mysql
      - |
        case "${cmd}" in
          "image") sh ${DEP}/ops/tool/image.sh sync "docker.io" "bitnami" "" "" "${REGISTRY_ENDPOINT}" "${REGISTRY_NAMESPACE}" "${REGISTRY_USERNAME}" "${REGISTRY_PASSWORD}" "mysql" 8.0.25-debian-10-r37;;
          "run") kubectl apply -f ${TMP}/mysql/job.yaml;;
          "delete") kubectl delete -f ${TMP}/mysql/job.yaml;;
        esac
  helm:
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["diff", "install", "upgrade", "delete"]
    step:
      - test "${K8S_CONTEXT}" == "$(kubectl config current-context)" || exit 1
      - sh ${DEP}/ops/tool/render.sh ${DEP}/ops/helm/rpc-app ${TMP}/helm/${NAME}
      - sh ${DEP}/ops/tool/render.sh ops/helm/values-adapter.yaml.tpl ${TMP}/helm/${NAME}/values-adapter.yaml
      - |
        case "${cmd}" in
          "diff"|"") helm diff upgrade "${NAME}" -n "${NAMESPACE}" "${TMP}/helm/${NAME}" -f "${TMP}/helm/${NAME}/values-adapter.yaml" --allow-unreleased;;
          "install") helm install "${NAME}" -n "${NAMESPACE}" "${TMP}/helm/${NAME}" -f "${TMP}/helm/${NAME}/values-adapter.yaml";;
          "upgrade") helm upgrade "${NAME}" -n "${NAMESPACE}" "${TMP}/helm/${NAME}" -f "${TMP}/helm/${NAME}/values-adapter.yaml";;
          "delete") helm delete "${NAME}" -n "${NAMESPACE}";;
        esac
  config:
    args:
      cmd:
        type: string
        default: diff
        validation: x in ["diff", "get", "put"]
    step:
      - sh ${DEP}/ops/tool/render.sh ops/config ${TMP}/config
      - |
        cd ${TMP}/config && touch app_local.json;
        case "${cmd}" in
          "diff"|"") cfg --camelName --inBaseFile base_local.json -a diff --outBaseFile base.json;;
          "get") cfg --camelName --inBaseFile base.json -a get | jq .;;
          "put") cfg --camelName --inBaseFile base_local.json -a put --outBaseFile base.json;;
        esac
  restart:
    step:
      - kubectl get pods -n "${NAMESPACE}" | grep "${NAME}" | awk '{print $1}' | xargs kubectl delete pods -n "${NAMESPACE}"
